//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public BehaviourTreeAddedListenerComponent BehaviourTreeAddedListener { get { return (BehaviourTreeAddedListenerComponent)GetComponent(GameComponentsLookup.BehaviourTreeAddedListener); } }
	public bool HasBehaviourTreeAddedListener { get { return HasComponent(GameComponentsLookup.BehaviourTreeAddedListener); } }

	public void AddBehaviourTreeAddedListener(System.Collections.Generic.List<IBehaviourTreeAddedListener> newValue)
	{
		var index = GameComponentsLookup.BehaviourTreeAddedListener;
		var component = (BehaviourTreeAddedListenerComponent)CreateComponent(index, typeof(BehaviourTreeAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceBehaviourTreeAddedListener(System.Collections.Generic.List<IBehaviourTreeAddedListener> newValue)
	{
		var index = GameComponentsLookup.BehaviourTreeAddedListener;
		var component = (BehaviourTreeAddedListenerComponent)CreateComponent(index, typeof(BehaviourTreeAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyBehaviourTreeAddedListenerTo(BehaviourTreeAddedListenerComponent copyComponent)
	{
		var index = GameComponentsLookup.BehaviourTreeAddedListener;
		var component = (BehaviourTreeAddedListenerComponent)CreateComponent(index, typeof(BehaviourTreeAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveBehaviourTreeAddedListener()
	{
		RemoveComponent(GameComponentsLookup.BehaviourTreeAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity : IBehaviourTreeAddedListenerEntity { }

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherBehaviourTreeAddedListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> BehaviourTreeAddedListener
	{
		get
		{
			if (_matcherBehaviourTreeAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.BehaviourTreeAddedListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherBehaviourTreeAddedListener = matcher;
			}

			return _matcherBehaviourTreeAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public void AddBehaviourTreeAddedListener(IBehaviourTreeAddedListener value)
	{
		var listeners = HasBehaviourTreeAddedListener
			? BehaviourTreeAddedListener.value
			: new System.Collections.Generic.List<IBehaviourTreeAddedListener>();
		listeners.Add(value);
		ReplaceBehaviourTreeAddedListener(listeners);
	}

	public void RemoveBehaviourTreeAddedListener(IBehaviourTreeAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = BehaviourTreeAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveBehaviourTreeAddedListener();
		}
		else
		{
			ReplaceBehaviourTreeAddedListener(listeners);
		}
	}
}
