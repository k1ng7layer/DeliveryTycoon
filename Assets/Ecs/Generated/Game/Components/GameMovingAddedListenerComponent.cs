//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public MovingAddedListenerComponent MovingAddedListener { get { return (MovingAddedListenerComponent)GetComponent(GameComponentsLookup.MovingAddedListener); } }
	public bool HasMovingAddedListener { get { return HasComponent(GameComponentsLookup.MovingAddedListener); } }

	public void AddMovingAddedListener(System.Collections.Generic.List<IMovingAddedListener> newValue)
	{
		var index = GameComponentsLookup.MovingAddedListener;
		var component = (MovingAddedListenerComponent)CreateComponent(index, typeof(MovingAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceMovingAddedListener(System.Collections.Generic.List<IMovingAddedListener> newValue)
	{
		var index = GameComponentsLookup.MovingAddedListener;
		var component = (MovingAddedListenerComponent)CreateComponent(index, typeof(MovingAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyMovingAddedListenerTo(MovingAddedListenerComponent copyComponent)
	{
		var index = GameComponentsLookup.MovingAddedListener;
		var component = (MovingAddedListenerComponent)CreateComponent(index, typeof(MovingAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveMovingAddedListener()
	{
		RemoveComponent(GameComponentsLookup.MovingAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity : IMovingAddedListenerEntity { }

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherMovingAddedListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> MovingAddedListener
	{
		get
		{
			if (_matcherMovingAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.MovingAddedListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherMovingAddedListener = matcher;
			}

			return _matcherMovingAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public void AddMovingAddedListener(IMovingAddedListener value)
	{
		var listeners = HasMovingAddedListener
			? MovingAddedListener.value
			: new System.Collections.Generic.List<IMovingAddedListener>();
		listeners.Add(value);
		ReplaceMovingAddedListener(listeners);
	}

	public void RemoveMovingAddedListener(IMovingAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = MovingAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveMovingAddedListener();
		}
		else
		{
			ReplaceMovingAddedListener(listeners);
		}
	}
}
